====
TODO
====

Big Stuff
---------

* Interact cells

* Data dialog

  - Fix the tab error. When you click on the upload file button, it doesn't go to that tab.

* Code completion

* Single-cell mode

  - Create hash tag routes (...#cell15, etc) so that someone can reference a single cell in a presentation with a url

  - Hash tag routes should probably reference cell id's not their order. That way when the worksheet is changed all of the links still work as expected

* Add option to store the notebook in a database instead of filesystem.

  - figure out which database systems to support

  - check out sagenb/storage/abstract_storage.py

* Testing, testing, testing

* Use three.js or something else instead of Jmol

  - See https://groups.google.com/forum/?fromgroups#!topic/sage-notebook/97AGs2hN3po

* Use sockets.io instead of async_request

  - use TornadIO2 https://github.com/MrJoes/tornadio2

Medium Stuff
------------

* Login page

* Report a problem dialog

* Help page

  - Choose between a popup window or a docked thing on the page or both.

* Log dialog/page

* Evaluate all cells

  - We cannot just run through every cell and call cell.evaluate(). Each cell has to be evaluated one at time. This means creating some sort of queue.

* Add some better styling to ? and ?? introspections

  - For styling code, see http://twitter.github.com/bootstrap/base-css.html#code

  - See main.less 

* Add grab image button to Jmol

  - I don't think this is high priority (unless someone really needs it). Hopefully, we'll get rid of Jmol soon anyways

* Create automatic print-friendly option

* Fix unfixable Jmol z-index bug

  - Try opening some Jmol plot and then scrolling down so that the Jmol appears over the navbar.

  - I've tried *almost* every iframe over applet trick out there but I think the most promising (and so far untried hack) would be to create an iframe inside the iframe which Jmol is in. Give the iframe in the iframe full width and the height of the navbar. Then, set the position of the iframe in the iframe to be the same as the position of the navbar (ie. when the iframe is below the navbar the iframe in the iframe would have a negative y value, because the y value or css top property is relative to its parent iframe). Dynamically update the position of the iframe in the iframe when the user scrolls. It would be a horrible hack and it may just be easier to get rid of Jmol.

Small Stuff
-----------

* Don't enable webassets bundling when in development mode

* Logout

* Restart sage

* Make checking for output occur on an exponential timer not every X seconds

  - See cell.check_for_output() in worksheet.js

* Get rid of the obsolete <tt> tags in the import dialog. Use css instead.

* Clean up LESS

  - see sagenb/data/sage/less/

* Clean up javascript

  - see sagenb/data/sage/js/

  - maybe use prototypes

  - maybe separate the different cell types.. this sounds easy but I'm not sure what kind of nasty issues we may run into

  - checkout some of IPython's code

* Clean up base.py and worksheet.py in flask_version/

Files
=====

	**flask_version/** - server stuff

		**base.py**

		**worksheet.py**

	**sagenb/**

		**data/** - all of the html/css/js data goes here

			**sage/** - all of the sage data

				**html/** - html templates

					**base_newui.html** - base template for the new interface (at some point this should just replace base.html)

					**base.html** - base template for the old interface

					**worksheet/**

						**worksheet.html** - html for the worksheet page

				**js/** - javascript

					**async_lib.js** - creates the async_request function

					**worksheet.js** - all of the javascript for the new worksheet page

					**notebook_lib.js** - all of the javscript for the old worksheet page

				**images/**

				**less/**

					**main.less** - less styling for all of the pages

			**webassets_generated/** - minified/combined files generated by webassets go here

				**base.js** - all of the javascript for base_newui.html minified

Frontend
========

The frontend of the Sage Notebook is built on Twitter's Bootstrap framework, MathJax, LESS, TinyMCE, and CodeMirror. Content is loaded dynamically -- no more sending HTML back-and-forth between the server and the browser. All communication is done with JSON using the encode_response and decode_response functions.

CSS vs LESS vs SASS/SCSS
------------------------

CSS preprocessing is very similar to CSS and significantly speeds up development. The choice between LESS and SASS is tough. The Notebook is written in LESS for the time being primarily because the Bootstrap framework is built on LESS. I would certainly not be offended, however, if someone was interested in rewriting the stylesheet in SASS.

OOP Javascript
--------------

(The "I" here is Sam.)

When I began re-writing everything, I looked at backbone.js (a popular MVC library for javascript) but I figured that using backbone would be a little bit of overkill, so I settled on just creating the javascript "classes." Actually, they are functions and worksheet.js takes advantage of a lot of sneaky functional programming tricks in javascript. Because functions in javascript are actually a type of Object, we can assign values and other functions to them. More importantly, because those functions (inside the "class" functions) are in the scope/closure of an Object they can reference all of the properties of that instance of that object. This lets you do things like this::

    this_cell.render = function(container) {
        this_cell.id
        this_cell.input
        this_cell.output
    }

instead of this::

    function get_cell_input(id) { /* ... */ }
    function get_cell_output(id) { /* ... */ }
    function render_cell(cell_id, container) {
        get_cell_input(cell_id)
        get_cell_output(cell_id)
    }

Also, it takes as many things out of the global scope as possible which is a good thing. It's certainly not a flawless approach but hopefully it helps.

See

* https://developer.mozilla.org/en/Introduction_to_Object-Oriented_JavaScript
  - In this one, they use prototyping which is a little bit different
* http://www.javascriptkit.com/javatutors/oopjs.shtml
  - this looks like it may have been in the stone ages so maybe it shouldn't be trusted but i used it anyways
* http://killdream.github.com/blog/2011/10/understanding-javascript-oop/
* http://net.tutsplus.com/tutorials/javascript-ajax/the-basics-of-object-oriented-javascript/


OTHER STUFF...

Backend
=======

If someone would be interested helping write this, go for it.
