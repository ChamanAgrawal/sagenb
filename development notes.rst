TODO
====

Big Stuff
---------

 * Interact cells
 * Single-cell mode

     - Create hash tag routes (...#cell15, etc) so that someone can reference a single cell in a presentation with a url
     - Hash tag routes should probably reference cell id's not their order. That way when the worksheet is changed all of the links still work as expected
 * Testing, testing, testing
 * Code completion
 * Use three.js or something else instead of Jmol
 * Use sockets.io instead of async_request

     - use TornadIO2 https://github.com/MrJoes/tornadio2
 * Add option to store the notebook in a database instead of filesystem.

     - figure out which database systems to support

Medium Stuff
------------

 * Login page
 * Help page
 * Log dialog
 * Create automatic print-friendly option

Small Stuff
-----------

 * Logout
 * Report a problem dialog
 * Evaluate all cells
 * Restart sage
 * Interrupt
 * Add grab image button to Jmol
 * Clean up LESS
 * Clean up javascript

     - maybe use prototypes
     - maybe separate the different cell types.. not sure if this is a good idea or not
     - incorporate some of the innovations used by IPython
 * Clean up base.py and worksheet.py in flask_version/

Files
=====

	flask_version/ - server stuff

		base.py

		worksheet.py

	sagenb/

		data/ - all of the html/css/js data goes here

			sage/ - all of the sage data

				html/ - html templates

					base_newui.html - base template for the new interface (at some point this should just replace base.html)

					base.html - base template for the old interface

					worksheet/

						worksheet.html - html for the worksheet page

				js/ - javascript

					worksheet.js - all of the javascript for the new worksheet page

					notebook_lib.js - all of the javscript for the old worksheet page

				images/

				less/

					main.less - less styling for all of the pages

			webassets_generated/ - minified/combined files generated by webassets go here

				base.js - all of the javascript for base_newui.html minified

Frontend
========

The frontend of the Sage Notebook is built on Twitter's Bootstrap framework, MathJax, LESS, TinyMCE, and CodeMirror. Content is loaded dynamically -- no more sending HTML back-and-forth between the server and the browser. All communication is done with JSON using the encode_response and decode_response functions.

CSS vs LESS vs SASS/SCSS
------------------------

Although plain CSS is more standard, CSS preprocessing is very similar and significantly speeds up development. The choice between LESS and SASS is tough. The Notebook is written in LESS for the time being primarily because the Bootstrap framework is built on LESS. I would certainly not be offended, however, if someone was interested in rewriting the stylesheet in SASS.

OTHER STUFF...

Backend
=======

If someone would be interested helping write this, please do.
